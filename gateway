#!/usr/bin/env python
import subprocess
from threading import Thread, RLock
import socket, time
import os

# Settings
COOJA_ADDR = 'localhost'
COOJA_PORT = 60001
BROKER_ADDR = 'localhost'
BROKER_PORT = "1888"
RCV_WDWS = 1024

# Global variables
topic_dict ={}
notified =set()
stop_thr= False

try:
	# socket connection to Cooja root mote
	client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	client_socket.connect((COOJA_ADDR, COOJA_PORT))
except:
	print "Please verify that the serial socket (server) is open in Cooja and try again."

# function to stop transmission of data from the topic topic_name 
# it sends an formatted message to the root that will handle the distribution	
def send_stop(client_socket,topic_name):
	client_socket.send("0:"+topic_name+"\n")

# function to restart transmission of data from the topic topic_name 	
# it sends an formatted message to the root that will handle the distribution	
def send_restart(client_socket,topic_name):
	client_socket.send("1:"+topic_name+"\n")


# class to lauch the MQTT broker and keep track of subscribers
class SubscriptionOpti(Thread):
	
    	def __init__(self):
		Thread.__init__(self)
		self.pr = subprocess.Popen("mosquitto -v -p "+BROKER_PORT, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		
	def run(self):
	    stdout = []
	    nxtIsTopic=False
	    idSub=""
	    while (not stop_thr):
		line = self.pr.stdout.readline()
		stdout.append(line)
		tabline = line.split(' ')

		# in previous iteration we saw that it was a subscribe so now we will get the topic
		if (nxtIsTopic):
			nxtIsTopic = False
			topic = tabline[1].split('\t')[1]
			if (topic not in topic_dict):	# if we don't know the topic
				topic_dict[topic].append(idSub)
				send_restart(client_socket,topic)
				print ("SubscriptionOpti restarted the unknown topic : " + topic)	
			else:
				if (len(topic_dict[topic])==0): # if this topic was advertised but no one was sub
					send_restart(client_socket,topic) # restart the advertisement for this topic
					if (topic in notified):			
						notified.remove(topic)
					print ("SubscriptionOpti restarted the topic : " + topic)	
				if (idSub not in topic_dict[topic]):				
					topic_dict[topic].append(idSub)

		# check for subscription and get the id  
		if (tabline[1]=="Received" and tabline[2]=="SUBSCRIBE"):
			nxtIsTopic = True
			idSub = tabline[4].split('-')[0]

		# check if disconnection to withdraw id from subscriber set
		if (tabline[1]=="Socket" and tabline[2]=="error"):
			idSub = tabline[5].split('-')[0]
			for top in topic_dict:
				if (idSub in topic_dict[top]): topic_dict[top].remove(idSub) # remove idSub from the publisher list for topic top
				if (len(topic_dict[top])==0 and top not in notified): 
					notified.add(topic)		# case this topic has no sub and is not notified,
					send_stop(client_socket,top)	# notify the root of it	
					print ("SubscriptionOpti stopped the topic :  " + top)
		if (line == '' and self.pr.poll() != None):
		    break

#format message received from the root and forward it to the broker
def main(client_socket):
	# will hold a single message at a time
	message=""
	
	while (not stop_thr):			
	    data = client_socket.recv(RCV_WDWS)
	    if ( data != ""):
		# data are formatted to end with an EOL
		if (data != "\n"):
			message+=data
		# when we have everything we process it
		else :
			tmp = message.split("\n") # prevent bug
			for part in tmp:
				topic_value = part.split(";")
				if (len(topic_value) == 4): # ;IP_ADDR;TOPIC;VALUE
					topic = topic_value[2]
					if (topic not in topic_dict):
						topic_dict[topic]=[]
						send_stop(client_socket,topic)
						notified.add(topic)
						print ("Main stopped the topic after firsts messages for  : " + topic)	
					myCmd = 'mosquitto_pub -h ' + BROKER_ADDR + ' -t ' + topic_value[2] + ' -p '+ BROKER_PORT+' -m ' + topic_value[3] 
					# execute the command that publishes the data received to the specified topic
					# the mosquitto clients must be installed : apt-get install mosquitto-clients 
					os.system(myCmd)
					print ("Message sent from "+topic_value[1]+ " for topic : "+ topic_value[2] + ' with value: ' + topic_value[3])
				topic_value = []
			tmp=""
			message=""


try:		
	thr = SubscriptionOpti()	# thread to keep track of subscription/unsubscription per topic
	thr.start()
	main(client_socket)		# main thread that listen for the data transmitted by the root 
					# and format in MQTT and send to a broker (settings in global at the begining)
except:
	print "Exiting the client... "	
	stop_thr = True			# tell the threads to stop
	thr.join()
	print "done."	
